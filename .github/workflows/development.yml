name: Development

on:
  workflow_call:
    inputs:
      php:
        required: true
        type: string
      mysql:
        required: true
        type: string
      module_codecept_test_group:
        type: string
        default: 'ddoe_wysiwyg'
      report_sonarcloud:
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      php:
        description: 'PHP version'
        required: true
        default: '8.0'
        type: choice
        options:
          - '8.0'
          - '8.1'
      mysql:
        description: 'MySQL version'
        required: true
        default: '5.7.37'
        type: choice
        options:
          - '5.7.37'
          - '8.0'
      module_codecept_test_group:
        description: 'Module codeception test group'
        required: true
        default: 'ddoe_wysiwyg'
        type: string
      report_sonarcloud:
        description: 'Trigger sonarcloud analize?'
        required: true
        default: true
        type: boolean

env:
  PACKAGE_NAME: 'ddoe/wysiwyg-editor-module'
  SONARCLOUD_ORGANIZATION: 'oxid-esales'
  SONARCLOUD_PROJECT_KEY: 'OXID-eSales_ddoe-wysiwyg-editor-module'

jobs:
  install_shop_with_module:
    runs-on: ubuntu-latest
    steps:
      - name: Print run parameters
        run: |
          echo "Running job with:\
            PHP version: ${{ inputs.php }}\
            MySQL version: ${{ inputs.mysql }}\
            Tests group: ${{ inputs.module_codecept_test_group }}\
            Trigger event: ${{ github.event_name }}"

      - name: Clone testing environment
        run: git clone https://github.com/OXID-eSales/docker-eshop-sdk.git .

      - name: Clone the shop
        run: git clone --depth 1 https://github.com/OXID-eSales/oxideshop_ce.git --branch b-7.1.x --single-branch source

      - name: Cache current installation
        uses: actions/cache@v4
        with:
          path: |
            ./*
          key: installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Prepare container configuration
        run: |
          make setup
          make addbasicservices
          make file=services/selenium-chrome.yml addservice

          perl -pi\
            -e 's#PHP_VERSION=.*#PHP_VERSION=${{ inputs.php }}#g;'\
            -e "s#MYSQL_VERSION=.*#MYSQL_VERSION=${{ inputs.mysql }}#g;"\
            .env

          perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 's#error_reporting = .*#error_reporting = E_ALL ^ E_WARNING ^ E_DEPRECATED#g;'\
            -e 'print "xdebug.max_nesting_level=1000\nxdebug.mode=coverage\n\n"'\
            containers/php/custom.ini

          perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf

      - name: Prepare shop configuration
        run: |
          cp source/source/config.inc.php.dist source/source/config.inc.php
          sed -i "1s+^+SetEnvIf Authorization "\(.*\)" HTTP_AUTHORIZATION=\$1\n\n+" source/source/.htaccess
          sed -i -e 's/<dbHost>/mysql/'\
                 -e 's/<dbUser>/root/'\
                 -e 's/<dbName>/example/'\
                 -e 's/<dbPwd>/root/'\
                 -e 's/<dbPort>/3306/'\
                 -e 's/<sShopURL>/http:\/\/localhost.local\//'\
                 -e 's/<sShopDir>/\/var\/www\/source\//'\
                 -e 's/<sCompileDir>/\/var\/www\/source\/tmp\//'\
              source/source/config.inc.php

      - name: Checkout current module
        uses: actions/checkout@v4
        with:
          path: source/test-module

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Install module
        run: |
          docker-compose exec -T \
            php composer config repositories.${{ env.PACKAGE_NAME }} \
            --json '{"type":"path", "url":"./test-module", "options": {"symlink": true}}'
          docker-compose exec -T \
            php composer require ${{ env.PACKAGE_NAME }}:* --no-interaction --no-update

      - name: Install dependencies and reset shop
        run: |
          docker-compose exec -T php composer update --no-interaction
          docker-compose exec -T php bin/oe-console oe:database:reset \
            --db-host=mysql --db-port=3306 --db-name=example --db-user=root --db-password=root --force
          docker-compose exec -T php bin/oe-console oe:module:activate ddoemedialibrary
          docker-compose exec -T php bin/oe-console oe:module:activate ddoewysiwyg

      - name: Install module dev dependencies
        run: |
          docker-compose exec -T \
            --workdir=/var/www/test-module \
            php composer install

      - name: Stop containers
        run: |
          docker-compose down
          sleep 2

      - name: Show docker log
        if: always()
        run: |
          docker-compose logs

      - name: Upload configuration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Configs-${{ inputs.php }}-${{ inputs.mysql }}
          path: |
            docker-compose.yml
            source/composer.json
            source/composer.lock
            source/source/config.inc.php

  styles:
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Load current installation from cache
        uses: actions/cache@v4
        with:
          path: |
            ./*
          key: installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Run phpcs
        if: always()
        run: |
          docker-compose exec -T \
            --workdir=/var/www/test-module \
            php composer phpcs

      - name: Run phpstan scan and show results
        id: phpstan
        if: always()
        run: |
          docker-compose exec -T \
            --workdir=/var/www/test-module \
            php composer phpstan

      - name: Run phpstan scan and generate report for further processing
        if: always()
        run: |
          docker-compose exec -T \
            --workdir=/var/www/test-module \
            php composer phpstan-report

      - name: Stop containers
        if: always()
        run: |
          make down
          sleep 2

      - name: Upload log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: StylesLog-${{ inputs.php }}
          path: |
            source/test-module/phpstan.report.json

  unit_tests:
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Load current installation from cache
        uses: actions/cache@v4
        with:
          path: |
            ./*
          key: installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Run tests
        run: |
          docker-compose exec -T \
            -e XDEBUG_MODE=coverage \
            --workdir=/var/www/test-module \
            php composer phpunit -- \
              --testsuite=Unit \
              --coverage-text \
              --coverage-clover=/var/www/unit.xml

      - name: Upload log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ModuleUnitTestsLog-${{ inputs.php }}-${{ inputs.mysql }}
          path: |
            source/unit.xml
            source/source/log/oxideshop.log
            data/php/logs/error_log.txt

      - name: Stop containers
        if: always()
        run: |
          docker-compose down
          sleep 2

  integration_tests:
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Load current installation from cache
        uses: actions/cache@v4
        with:
          path: |
            ./*
          key: installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Run tests
        run: |
          docker-compose exec -T \
            -e XDEBUG_MODE=coverage \
            --workdir=/var/www/test-module \
            php composer phpunit -- \
              --testsuite=Integration \
              --coverage-text \
              --coverage-clover=/var/www/integration.xml

      - name: Upload log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ModuleIntegrationTestsLog-${{ inputs.php }}-${{ inputs.mysql }}
          path: |
            source/integration.xml
            source/source/log/oxideshop.log
            data/php/logs/error_log.txt

      - name: Stop containers
        if: always()
        run: |
          docker-compose down
          sleep 2

  codeception_twig:
    needs: [ install_shop_with_module ]
    runs-on: ubuntu-latest
    steps:
      - name: Load current installation from cache
        uses: actions/cache@v4
        with:
          path: |
            ./*
          key: installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}
            installation-${{ github.sha }}-${{ join(inputs.*, '-') }}-${{ github.run_number }}

      - name: Start containers
        run: |
          make up
          sleep 2

      - name: Install twig template engine and apex theme
        run: |
          docker-compose exec -T php composer require oxid-esales/twig-component:dev-b-7.1.x --no-update
          docker-compose exec -T php composer require oxid-esales/twig-admin-theme:dev-b-7.1.x --no-update
          docker-compose exec -T php composer require oxid-esales/apex-theme:dev-b-7.1.x --no-update
          docker-compose exec -T php composer update --no-interaction

      - name: Run tests
        run: |
          docker-compose exec -T \
            --workdir=/var/www/test-module \
            php composer codeception -- -g ${{ inputs.module_codecept_test_group }}

      - name: Upload log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ModuleCodeceptionTestsLog-${{ inputs.php }}-${{ inputs.mysql }}
          path: |
            docker-compose.yml
            source/composer.json
            source/composer.lock
            source/source/config.inc.php
            source/source/log/oxideshop.log
            data/php/logs/error_log.txt
            source/tests/Codeception/_output

      - name: Stop containers
        if: always()
        run: |
          make down
          sleep 2

  sonarcloud:
    needs: [ unit_tests, integration_tests ]
    if: ${{ always() && inputs.report_sonarcloud }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current module
        uses: actions/checkout@v4

      - name: Download Integration artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ModuleIntegrationTestsLog-${{ inputs.php }}-${{ inputs.mysql }}
          path: ./coverage/

      - name: Download Unit artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ModuleUnitTestsLog-${{ inputs.php }}-${{ inputs.mysql }}
          path: ./coverage/

      - name: List everything
        if: always()
        run: |
          cd coverage
          ls -alh
          cd source
          ls -alh

      - name: Fix coverage paths
        if: always()
        run: |
          sed -i 's+/var/www/test-module/+./+' coverage/source/unit.xml
          sed -i 's+/var/www/test-module/+./+' coverage/source/integration.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ env.SONARCLOUD_ORGANIZATION }}
            -Dsonar.projectKey=${{ env.SONARCLOUD_PROJECT_KEY }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.php.coverage.reportPaths=coverage/source/unit.xml,coverage/source/integration.xml
            -Dsonar.cpd.php.minimumTokens=25
            -Dsonar.cpd.php.minimumLines=5